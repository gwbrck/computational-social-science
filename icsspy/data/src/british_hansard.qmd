# Splitting up the British Hansard by Year

```{python}
import pandas as pd
import glob
import re
```

Path to full data (not in git repo).

```{python}
british_hansard_full = '../british_hansard/hansard-speeches-v301.csv'
```


```{python}
df = pd.read_csv(british_hansard_full)
```

Group by year and write to seperate files.

```{python}
for year, data in df.groupby('year'):
    output_file = f'../british_hansard_{year}.csv'
    data.to_csv(output_file, index=False)
    print(f'Created {output_file} with {len(data)} records.')
```





<!--

To read in specific years:

```{python}
def load_british_hansard(years=None):
    # Define the pattern to find the files
    pattern = re.compile(r'british_hansard_(\d{4})\.csv')

    # Get all files matching the pattern in the current directory
    all_files = glob.glob('british_hansard_*.csv')

    # If no years are provided, load all years
    if years is None:
        files_to_load = all_files
    else:
        # Flatten the years list if it includes ranges
        flat_years = []
        for year in years:
            if isinstance(year, int):
                flat_years.append(year)
            elif isinstance(year, str) and '-' in year:
                start, end = map(int, year.split('-'))
                flat_years.extend(range(start, end + 1))
            else:
                raise ValueError(f"Invalid year format: {year}")

        # Filter files that match the provided years
        files_to_load = [file for file in all_files if int(pattern.search(file).group(1)) in flat_years]

    # Load and concatenate the files into a single DataFrame
    df_list = [pd.read_csv(file, low_memory=False) for file in files_to_load]
    combined_df = pd.concat(df_list, ignore_index=True)

    # Reset the index and return the combined DataFrame
    combined_df.reset_index(drop=True, inplace=True)
    return combined_df
```

We can load all years by default.

```{python}
df_all = load_british_hansard()
df_all.info()
```

Or work with specific years (including ranges of years).

```{python}
# Load specific years
df_selected = load_british_hansard(years=[2012, 2013, '2017-2020'])
df_selected.info()
```

In this case, let's work with data from 2016-2020.

```{python}
bh1620 = load_british_hansard(years=['2016-2020'])
bh1620.info()
```


```{python}
bh1620['year'].min(), bh1620['year'].max()
```
 -->
