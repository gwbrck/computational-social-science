## Foundations

Political Blog Networks<br>[[@adamic2005political; @peixoto2021hairball]]{.nord-footer}

- fit a first nested Stochastic Blockmodel
- create meaningful and informative network visualizations
    - re-create the "divided we blog" and other figures

## Setup

With the `gt` Conda environment activated,

```python
import numpy as np
import graph_tool.all as gt
import matplotlib as mpl
from icsspy.networks import rotate_positions

print(f'Using graph-tool version {gt.__version__}')
```

> Using graph-tool version 2.77 (commit , )

<br>

Load the data.

```python
g = gt.collection.data["polblogs"]
print(g)
```

> <Graph object, directed, with 1490 vertices and 19090 edges, 4 internal vertex properties, 2 internal graph properties, at 0x16932af00>

##

:::: {.columns}
::: {.column width="25%"}
```python
print(g.gp.readme)
```
:::

::: {.column width="10%"}
:::

::: {.column width="65%"}
> Political blogosphere Feb. 2005<br>
> Data compiled by Lada Adamic and Natalie Glance<br>
> <br>
> Node "value" attributes indicate political leaning according to:<br>
> <br>
>   0 (left or liberal)<br>
>   1 (right or conservative)<br>
> <br>
> Data on political leaning comes from blog directories as indicated. Some blogs were labeled manually, based on incoming and outgoing links and posts around the time of the 2004 presidential election.  Directory-derived labels are prone to error; manual labels even more so.
>
> Links between blogs were automatically extracted from a crawl of the front page of the blog.
>
> These data should be cited as Lada A. Adamic and Natalie Glance, "The political blogosphere and the 2004 US Election", in Proceedings of the WWW-2005 Workshop on the Weblogging Ecosystem (2005).
:::
::::

## Property Maps

:::: {.columns}
::: {.column width="50%"}
```python
type(g.vp.value)
```

> graph_tool.VertexPropertyMap

<br>

We can look up the political class for any given node by passing its integer ID. For example, vertex 30:

```python
g.vp.value[30]
```

<br>

To view all classifications, we can iterate over the vertices and print each vertex ID followed by its class label:

```python
for v in g.vertices():
    print(v, g.vp.value[v])
```
:::

::: {.column width="50%"}
:::
::::

##

<br><br>

We can iterate over the vertices to map political labels to colors and store the results in an internal property map, `vertex_political_colors`. To match the original figure, we'll use <span style="color: #D72F32;">#D72F32</span> for right-conservative (Republicans) and <span style="color: #2F357E;">#2F357E</span> for left-liberal (Democrats).

<br>

```python
political_colors = {0: "#2F357E", 1: "#D72F32"}  # color map
vertex_political_colors = g.new_vertex_property("string")  # new vertex property

# assign colors to each vertex based on the political classification
for v in g.vertices():
    vertex_political_colors[v] = political_colors[g.vp.value[v]]
```


##

:::: {.columns}
::: {.column width="65%"}

As a first step, let's recreate the political blogs figures we've seen so far (including those based on the nested SBM). We'll assign node positions using the **stable force directed placement** function, `sfdp_layout()`. This will more-or-less recreate the force directed layout from the original.

<br>

```python
pos = gt.sfdp_layout(g)

gt.graph_draw(
    g, pos,
    vertex_fill_color=vertex_political_colors,
    output_size=(1200, 1200),
    bg_color=[1, 1, 1, 1], # white background (transparent by default)
    inline=True
)
```
:::

::: {.column width="3%"}
:::

::: {.column width="32%"}
![We could ignore isolates and rotate the graph's position.](../notebooks/output/polblogs_0.png){width=100% #fig-polblogs_0}
:::
::::


##

<br><br>

:::: {.columns}
::: {.column width="65%"}

Let's just focus on the giant component for a cleaner visualization. We'll also rotate the graph's position to match the figures more closely.

```python
giant = gt.extract_largest_component(g, directed=True)

pos = gt.sfdp_layout(giant)
pos = rotate_positions(pos, a=90)

gt.graph_draw(
    giant, pos,
    vertex_fill_color=vertex_political_colors,
    output_size=(1200, 1200),
    bg_color=[1, 1, 1, 1],
    inline=True
)
```

:::

::: {.column width="3%"}
:::

::: {.column width="32%"}
![The giant component.](../notebooks/output/polblogs_2.png){width=100% #fig-polblogs_2}
:::
::::


##

<br><br>

Next, we fit an SBM and color the nodes based on their estimated block membership.

```python
blockstate = gt.minimize_nested_blockmodel_dl(giant)
blockstate_level_0 = blockstate.levels[0]
blockstate_level_0
```

> <BlockState object with 793 blocks (18 nonempty), degree-corrected, for graph <GraphView object, directed, with 793 vertices and 15841 edges, 4 internal vertex properties, 2 internal graph properties, edges filtered by (<EdgePropertyMap object with value type 'bool', for Graph 0x17f9fd6d0, at 0x30299f1a0>, False), vertices filtered by (<VertexPropertyMap object with value type 'bool', for Graph 0x17f9fd6d0, at 0x302903470>, False), at 0x17f9fd6d0>, at 0x3029612e0>



##

<br><br>

:::: {.columns}
::: {.column width="65%"}
We can use the `.draw()` method for blockstate objects.

```python
blockstate_level_0.draw(
    pos=pos,
    output_size=(1200, 1200)
)
```
:::

::: {.column width="3%"}
:::

::: {.column width="32%"}
![The default force-directed layout with a Nested SBM for community detection.](../notebooks/output/polblogs_3.png){width=100% #fig-polblogs_3}
:::
::::



##

Another figure more-or-less recreated! Two more to go.

<br>

Let's modify the force directed layout to add attractive forces for block membership.

```python
pos_refined = gt.sfdp_layout(g, groups=blockstate_level_0.b, gamma=.04)
pos_refined = rotate(pos_refined, 125) # make it horizontal
```

<br>

Then we can visualize the blockstate again.

```python
blockstate_level_0.draw(
    pos=pos_refined,
    edge_gradient=[],
    edge_color="#33333322",
    output_size=(1200, 1200)
)
```

::: {.notes}
As a refinement step **based on model criticism**, we'll adjust the force-directed layout by adding an attractive force between nodes in the same block. This is done by passing the following arguments to `sfdp_layout()`:

- `groups`: A vertex property map that assigns nodes to specific groups, in this case, block assignments at the lowest level of the nested SBM (`blockstate_level_0.b`). This adds additional attractive forces for block membership in the layout.
- `gamma`: Controls the strength of the attractive force for nodes in the same block. A small value corresponds to a weak force and more spread out clusters, while a larger value results in more compact clusters.

We'll pass `blockstate_level_0.b` (block assignments) to `sfdp_layout()`. The `.b` attribute provides access to the block assignments.
:::



##

![Let's rotate the graph and then re-draw it.](../notebooks/output/polblogs_4.png){width=45% #fig-polblogs_4}

```python
pos_refined = rotate_positions(pos_refined, 45)
```


##

![ðŸ˜Œ Look at that!](../notebooks/output/polblogs_5.png){width=60% #fig-polblogs_5}


##

:::: {.columns}
::: {.column width="65%"}
### Adjusting Node Colors <br>& Exploring Hierarchy

<br>

For the final adjustment, let's assign node colors based on political classification rather than block membership and use a layout that is designed to emphasize the hierarchical structure of the network. Even though we are dropping back down to two colors, the block structure will still be evident from the layout and we should be able to how well the binary classification lines up with the hierarchical blockmodel.
:::

::: {.column width="45%"}
:::
::::



##

:::: {.columns}
::: {.column width="65%"}
### Divided They Blog?

What do you think?

<br>

```python
blockstate.draw(
    vertex_fill_color=vertex_political_colors,
    output_size=(1200, 1200),
    bg_color=[1, 1, 1, 1],
    inline=True,
)
```
:::

::: {.column width="35%"}
![We could still improve this...](../notebooks/output/polblogs_7.png){#fig-polblogs_7}
:::
::::

::: {.notes}
This visualization reveals the hierarchical structure more clearly. It's a bit tough to see right now, but the blue square node right in the middle of the network represents the entire graph merged into one group at the highest level of the block hierarchy. As you move outward from the center, the graph splits into smaller and smaller blocks, which correspond to different political blogs at the lowest level of the block hierarchy.

You may notice that the nested SBM reveals a more complex structure than a simple left-right division. The hierarchy shows internal differentiation within each political cluster, revealing sub-communities that were not as apparent in the force-directed layout. However, we can see a clear split into two groups at the highest-level below the full graph that does align with the binary classifications.
:::



##

:::: {.columns}
::: {.column width="65%"}
### Divided They Blog?

Let's tweak the appearance of the block-level graph to make it easier to see and more visually appealing. We will modify the properties of the hierarchical block nodes and edges using `hvprops` (hierarchical vertex properties) and `heprops` (hierarchical edge properties).

<br>

```python
hvprops = {
    "fill_color": "white",
    "size": 30,
}

heprops = {
    "color": "white",
    "pen_width": 2,
}

blockstate.draw(
    vertex_fill_color=vertex_political_colors,
    hvprops=hvprops,
    heprops=heprops,
    output_size=(1200, 1200),
    bg_color=[1, 1, 1, 1],
    inline=True,
)
```
:::

::: {.column width="35%"}
![Much better!](../notebooks/output/polblogs_8.png){#fig-polblogs_8}
:::
::::

::: {.notes}

:::


##

We just

- recreated the figures
- fit and visualized our first Nested Stochastic Blockmodel
- learned how to modify the observed and hierachical networks in `graph-tool` visualizations

#### When you're ready, let's start the second tutorial notebook!

::: {.notes}
With that, we've successfully recreated the series of political blog network figures from the lecture using `graph-tool`. We learned how to run `graph-tool` code in a conda environment, extracted the giant component, fit our first nested Stochastic Blockmodel (NSBM), and created a series of visualizions of the network and it's hierarchical block structure. We also learned how to adjust force_directed layouts to add additional attractors for group memberships based on simple model criticism, and how to modify and refine the visual properties of networks at different levels of the block hierarchy.

In the next part of the tutorial, we'll explore the Enron email networks, applying similar techniques and deepening our understanding of community detection in large networks. We'll fit different kinds of models to different kinds of network representations and then rank the models based on their description lengths. As a bonus, we will compare these to results from modularity-maximization approaches (which you should not use).
:::
