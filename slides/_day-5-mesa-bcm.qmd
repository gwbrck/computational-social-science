# [Social Learning, Influence, and]{.small-text}<br>Opinion Dynamics

## Opinion Dynamics

<br><br>

:::: {.columns}
::: {.column width="25%"}
#### Central Questions

$\longrightarrow$
:::

::: {.column width="5%"}
:::

::: {.column width="70%"}
How do opinions form, cluster, and change in populations? How do populations reach opinion consensus, polarization, or fragmentation? What are the key drivers of formation, clustering, change, as well as population-level consensus, polarization, or fragmentation? What are the roles played by: the structure and dynamics of multi-layer social networks; disinformation and propaganda; echo chambers and filter bubbles; agent cognition, emotion, and identity, etc.? How do we best model diversity and heterogenous populations?

<br>

[**Bounded Confidence Models (BCE)**]{.large-text}

BCMs simulate opinion evolution in a continuous opinion space. People interact and influence each other if their opinions are within a certain threshold ($\epsilon$).

- Agents have continuous opinions (e.g., -1 to 1).
- A Confidence Bound ($\epsilon$) determines the range within which agents are influenced by others.
- In interactions, agents adjust opinions if the difference between their opinion and their alter's opinion is within their confidence bound.
- The outcome is typically opinion clusters indicating polarization, fragmentation, or consensus.
:::
::::

::: {.notes}
Opinion dynamics research is a key area in computational social science, focusing on how individuals' opinions are shaped and how these opinions influence group decisions.

This research is especially relevant to understanding phenomena like political polarization, consensus formation in teams, and the spread of misinformation.

In this part of the lecture, we'll explore one of the foundational models in opinion dynamics: the Bounded Confidence Model (BCM), which offers a way to understand how opinions evolve when individuals are influenced only by those with similar views.

The Bounded Confidence Model was introduced as a way to simulate how people influence each other's opinions when they only engage with those who hold similar views.

This model is particularly powerful for studying polarization, where society splits into groups with opposing opinions, and for understanding the conditions under which consensus can be reached.

Let's break down the components of a Bounded Confidence Model:

Agents: Each agent represents an individual with an opinion, typically modeled as a number between -1 and 1.

Confidence Bound ($\epsilon$): This is a critical parameter. It represents how open an agent is to interacting with others. If another agent's opinion is within this bound, they will influence each other.

Interaction: When two agents interact, they adjust their opinions towards each other. This models the idea of social influence, where people often adjust their views based on those they interact with.

Outcome: Depending on the value of $\epsilon$ and the initial distribution of opinions, the model can result in different outcomes: the formation of distinct opinion clusters, complete polarization, or consensus.
:::


## {background-color="#F0F0F0"}

:::: {.columns}
::: {.column width="75%"}
<div style="background-color: white; padding: 80px; width: 75%; height: 600px; overflow-y: scroll; border-radius: 10px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);">

{{< include _day-5-odd-bcm.md >}}

</div>
:::

::: {.column width="25%"}
ODD Protocol for Bounded Confidence Model<br>$\longleftarrow$

<br>

![[Figure reproduced from @railsback2019agent.]{.nord-light}](media/odd.png){width="100%" .shadow-img}
:::
::::


## Imports

```python
from mesa import Agent
from mesa import Model
from mesa.space import MultiGrid
from mesa.time import RandomActivation
from mesa.datacollection import DataCollector
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from pprint import pprint
import yaml

import icsspy
icsspy.set_style()
```

## [(BCM)]{.lightgray} The Agent Class

<br>

```python
class BCMAgent(Agent):
    def __init__(self, unique_id, model, epsilon, max_agent_step_size=1):
        super().__init__(unique_id, model)
        self.opinion = self.random.uniform(-1, 1)  # Agent's opinion initialized between -1 and 1
        self.epsilon = epsilon  # Confidence bound ($\epsilon$)
        self.max_agent_step_size = max_agent_step_size  # Step size for movement
        self.pos_history = []  # Track agent's position over time
        self.interactions = {}  # Track interactions with a count

    def step(self):
        # Move to a random neighboring cell with the given step size
        possible_moves = self.model.grid.get_neighborhood(self.pos, moore=True, include_center=False, radius=self.max_agent_step_size)
        new_position = self.random.choice(possible_moves)
        self.model.grid.move_agent(self, new_position)
        self.pos_history.append(new_position)  # Record the new position

        # Interact with neighbors within confidence bound
        neighbors = self.model.grid.get_neighbors(self.pos, moore=True, include_center=False)
        for neighbor in neighbors:
            if abs(self.opinion - neighbor.opinion) <= self.epsilon:
                # Update opinion if within confidence bound
                self.opinion = (self.opinion + neighbor.opinion) / 2

            # Record interactions
            if neighbor.unique_id in self.interactions:
                self.interactions[neighbor.unique_id] += 1
            else:
                self.interactions[neighbor.unique_id] = 1
```


## [(BCM)]{.lightgray} The Model Class

<br>

```python
class BoundedConfidenceModel(Model):
    def __init__(self, grid_width, grid_height, N, epsilon, max_agent_step_size=1, max_steps=1000, convergence_threshold=0.001):
        super().__init__()
        self.num_agents = N
        self.grid = MultiGrid(grid_width, grid_height, True)
        self.schedule = RandomActivation(self)
        self.epsilon = epsilon
        self.max_agent_step_size = max_agent_step_size
        self.max_steps = max_steps
        self.convergence_threshold = convergence_threshold

        # Initialize step_count
        self.step_count = 0  # This will track the number of steps taken

        # Create agents
        for i in range(self.num_agents):
            step_size = max_agent_step_size if i % 2 == 0 else 1  # Half agents have large step size, half small
            agent = BCMAgent(i, self, epsilon, max_agent_step_size=step_size)
            self.grid.place_agent(agent, (self.random.randrange(self.grid.width),
                                          self.random.randrange(self.grid.height)))
            agent.pos_history.append(agent.pos)  # Initialize the position history with the starting position
            self.schedule.add(agent)

        self.datacollector = DataCollector(
            agent_reporters={"Opinion": "opinion"},
            model_reporters={"Avg_Similarity": self.calculate_similarity}
        )

    def calculate_similarity(self):
        """Calculate average pairwise similarity in agent opinions."""
        opinions = np.array([agent.opinion for agent in self.schedule.agents])
        pairwise_diffs = np.abs(opinions[:, None] - opinions[None, :])
        similarity = 1 - pairwise_diffs  # Similarity is inverse of difference
        avg_similarity = np.mean(similarity)
        return avg_similarity

    def step(self):
        self.datacollector.collect(self)
        self.schedule.step()
        self.step_count += 1

        # Check stopping conditions
        if self.check_convergence() or self.step_count >= self.max_steps:
            self.running = False

    def check_convergence(self):
        """Check if the opinions have converged."""
        opinions = np.array([agent.opinion for agent in self.schedule.agents])
        max_diff = np.max(np.abs(opinions[:, None] - opinions[None, :]))
        return max_diff < self.convergence_threshold
```

## [(BCM)]{.lightgray} Model Parameters

<br>

```python
with open('_variables.yml', 'r') as file:
    params = yaml.safe_load(file)

model_params = params.get('bounded_confidence_model_1')
pprint(model_params)
```

[{'N': 100,
 'epsilon': 0.5,
 'grid_height': 40,
 'grid_width': 40,
 'max_agent_step_size': 1,
 'n_iterations': 1500}]{.monospace}


## Run the Model & Collect Data

<br>

:::: {.columns}
::: {.column width="75%"}
```python
model = BoundedConfidenceModel(
    grid_width=model_params['grid_width'],
    grid_height=model_params['grid_height'],
    N=model_params['N'],
    epsilon=model_params['epsilon'],
    max_agent_step_size=model_params['max_agent_step_size'],
)

for i in range(model_params['n_iterations']):
    model.step()

results = model.datacollector.get_agent_vars_dataframe().reset_index()
results.head(10)
```

<!--
```python
#| echo: false
from icsspy.utils import markdown_table
md = markdown_table(results.sample(10), 'tables/_bcm_1.md')
print(md)
```
 -->

:::

::: {.column width="25%"}
{{< include tables/_bcm_1.md >}}
:::
::::



## Plot Opinion Distributions

<br>

```python
grouped = results.groupby('Step')

plt.figure(figsize=(10, 6))

for name, group in grouped:
    sns.kdeplot(group['Opinion'], color='C0', alpha=0.2)

plt.xlabel('\nOpinion')
plt.ylabel('Density\n')
title = "Bounded Confidence Model\n" + r"$\epsilon$" + f" = {model_params['epsilon']}\n"
plt.title(title, loc='left')
plt.grid(True)
plt.savefig('media/bounded-confidence-opinion-distribution-evolution.png', dpi=300)
```

##

![A collection of KDE plots showing the evolution of the opinion distribution at each time step in the model.](media/bounded-confidence-opinion-distribution-evolution.png){width="75%" #fig-bcmevo}

## Plot Opinions Over Time

<br>

```python
time_steps = results['Step']
opinions = results['Opinion']
title = "Bounded Confidence Model\n" + r"$\epsilon$" + f" = {model_params['epsilon']}\n"

plt.figure(figsize=(12, 6))
sc = plt.scatter(time_steps, opinions, c=opinions, cmap='coolwarm', alpha=0.5, s=10)
cbar = plt.colorbar(sc)
cbar.set_label('Opinion')
plt.xlabel('Time (Steps)')
plt.ylabel('Opinion')
plt.title(title, loc='left')
plt.xlim(time_steps.min(), time_steps.max())
plt.ylim(-1.01, 1)
plt.savefig('media/bounded_confidence_epsilon_one_run.png', dpi=300)
```

##

![Three opinion clusters forming over time in a single run of a BCM with $\epsilon$ = 5. Note the center and two extremes.](media/bounded_confidence_epsilon_one_run.png){width="75%" #fig-bounded_confidence_epsilon_one_run}

## Experimenting with $\epsilon$

<br>

Lets run the simulation with different $\epsilon$ values (e.g., -1 to 1 in steps) and collect the results in a DataFrame. The DataFrame will include an additional column to track the $\epsilon$ used in each run.

```python
def run_simulation_with_different_epsilons(model_params, epsilon_values):
    all_results = []

    for epsilon in epsilon_values:
        model = BoundedConfidenceModel(
            grid_width=model_params['grid_width'],
            grid_height=model_params['grid_height'],
            N=model_params['N'],
            epsilon=epsilon,
            max_agent_step_size=model_params['max_agent_step_size'],
        )

        for i in range(model_params['n_iterations']):
            model.step()

        epsilon_results = model.datacollector.get_agent_vars_dataframe().reset_index()
        epsilon_results['Epsilon'] = epsilon  # Add epsilon to track different values
        all_results.append(epsilon_results)

    # Combine all results into a single DataFrame
    combined_results = pd.concat(all_results, ignore_index=True)
    return combined_results
```

Let's run models for the following values and plot the results.

```python
epsilon_values = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
epsilon_results = run_simulation_with_different_epsilons(
    model_params, epsilon_values
)

epsilon_results.sample(10)
```

## Experimenting with $\epsilon$


<!--
```python
#| echo: false
from icsspy.utils import markdown_table
md = markdown_table(epsilon_results.sample(10), 'tables/_bcm_2.md')
print(md)
```
 -->

{{< include tables/_bcm_2.md >}}


<!--
```python
#| echo: false
epsilon_results.info()
epsilon_results.to_csv('output/bcm_epsilon_results.csv', index=False)
```
 -->

## Experimenting with $\epsilon$

<br>

Let's create some subplots to compare runs for each of our $\epsilon$ values.

```python
grouped = epsilon_results.groupby('Epsilon')

fig, axs = plt.subplots(
    11, 1,
    figsize=(12, 30),
    sharex=True, sharey=True,
    constrained_layout=True
)

for (epsilon, group), ax in zip(grouped, axs):
    time_steps = group['Step']
    opinions = group['Opinion']

    sc = ax.scatter(
        time_steps,
        opinions,
        c=opinions,
        cmap='coolwarm',
        alpha=0.5,
        s=10
    )

    cbar = fig.colorbar(sc, ax=ax)
    # cbar.set_label('Opinion')

    ax.set_title(r"$\epsilon$" + f" = {epsilon}", loc='left')

    ax.set_xlim(time_steps.min(), time_steps.max())
    ax.set_ylim(-1.01, 1)

# custom positions for shared x and y labels
fig.text(
    0.5, -0.01,
    'Time (Steps)',
    ha='center',
    va='center',
    fontsize=18
)

fig.text(
    -0.01, 0.5,
    'Opinion',
    ha='center',
    va='center',
    rotation='vertical',
    fontsize=18
)

plt.savefig('media/epsilon_comparison_one_run.png', dpi=300)
```

##

![Results of a parameter sweep on $\epsilon$. Note tendencies towards fragmentation, polarization, and consensus at different $\epsilon$ values.](media/epsilon_comparison_one_run.png){width="100%" #fig-epsilon_comparison_one_run}
