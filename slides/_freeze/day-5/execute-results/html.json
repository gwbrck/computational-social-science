{
  "hash": "072b3bca4a970cbb5991195f300eed47",
  "result": {
    "markdown": "---\ntitle: \"Simulation &<br>Agent-based Models\"\nsubtitle: \"[DAY FIVE]{.kn-pink} [GESIS Fall Seminar in Computational Social Science]{.kn-blue}\"\nauthor:\n  - name: John McLevey\n    affiliations:\n      - name: University of Waterloo\n  - name: Johannes B. Gruber\n    affiliations:\n      - name: VU Amsterdam\noutput-dir: \"../docs/\"\nformat:\n  revealjs:\n    theme: [default, custom.scss]\n    width: 1600\n    height: 900\n    embed-resources: true\n    execute:\n      echo: true\n      warning: false\n      cache: true\n      freeze: true\n    slide-number: false\n    chalkboard: false\n    preview-links: auto\n    smaller: true\n    fig-align: left\n    fig-format: svg\n    lightbox: true\n    scrollable: true\n    code-overflow: scroll\n    code-fold: false\n    code-line-numbers: true\n    code-copy: hover\n    reference-location: document\n    tbl-cap-location: margin\n    logo: media/logo_gesis.png\n    footer: \"[CC BY-SA 4.0]{.nord-footer}\"\n    email-obfuscation: javascript\nhighlight-style: \"nord\"\nbibliography: references.bib\n---\n\n<!-- {{< include _day-5-introduction.qmd >}} -->\n<!-- {{< include _day-5-synthetic-networks.qmd >}} -->\n## Agent-based Modelling in Python\n\n`NDLib`\n\n<br>\n\n:::: {.columns}\n::: {.column width=\"40%\"}\n![Don't forget about your conda environment!](media/chatgpt_dependency_hell.png){width=100%}\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"55%\"}\nWith the `gt` conda environment still activated, import the packages.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport random\nimport networkx as nx\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport ndlib.models.ModelConfig as mc\nimport ndlib.models.epidemics as ep\nfrom ndlib.utils import multi_runs\n\nimport icsspy\nimport icsspy.simulations as sims\n\nicsspy.set_style()\nrandom.seed(36)\n```\n:::\n\n\n:::\n::::\n\n\n##\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\npopulation_size = 300\nG = nx.watts_strogatz_graph(population_size, 4, 0.15)\nG.name = \"A Simulated Small World\"\n\nlayout = nx.nx_pydot.graphviz_layout(G)\n\nfig, ax = plt.subplots(figsize=(12, 12))\nnx.draw(G, pos=layout, node_color='gray', edge_color='gray', node_size=100, width=.5)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](day-5_files/figure-revealjs/cell-3-output-1.svg){}\n:::\n:::\n\n\n::: {.notes}\nTo get started with modelling diffusion processes, we’ll simulate a simple network with 300 nodes. The particular type of network we are simulating here is a ‘small-world’ network (i.e. low average shortest paths and high clustering coefficients). Each node in this simulated network, shown in Figure 16.2, will be connected to four other nodes. Obviously, this network differs substantially from just about any existing social network that we might observe empirically, but it’s a useful starting point. Once we’ve developed some intuition of how these types of models work, we’ll switch over to using empirical data on interaction networks.\n:::\n\n## The SIR Model\n\nSIR is a **compartmental model** of disease spread that partitions a population into three compartments: \n\n- **susceptible** people, who may become infected in the future, \n- **infected** people are people who may spread the disease, and \n- **recovered/removed** people, who, depending on the model have either died or recovered and developed immunity.\n\n$$\n\\begin{align}\n\\frac{dS}{dt} &= - \\left( \\frac{a}{N}\\right)  I S \\\\\n\\frac{dI}{dt} &= \\left( \\frac{a}{N}\\right)  I S - b I \\\\\n\\frac{dR}{dt} &= bI\n\\end{align}\n$$\n\nSubject to $R_0 = \\frac{a}{b}$\n\nWhere: \n\n* $\\frac{dS}{dt}$, $\\frac{dI}{dt}$, and $\\frac{dR}{dt}$ represents the *rate of change* in the relevant population compartment \n* $N$ is the total population\n* $R_0$ represents the ability of a single infected individual to infect others, the **basic reproduction rate**\n* $a$ and $b$ are parameters that can be related to the typical time between contacts and the typical time until an Infected becomes Recovered. \n\n::: {.notes}\nTraditional SIR models describe transitions between these compartments using a set of differential equations. Note that the equation for each population takes into account other population compartments. As one changes, the others will change. \n\nThe Susceptible population will become infected at a rate proportional to **the number of Infected and Susceptible** (the more there are of one or the other, the faster a disease will spread), but slowed down by the total population size, a kind of proxy for population density. \n\nThe Infected population will increase at the same rate that the Susceptible population decreases, as people move from one compartment to the other, but it will also decrease at a rate relative to its size and how quickly people recover from the disease. \n\nSimilarly, the Recovered compartment will increase at the same rate that the Infected compartment is losing population. We'll see this in happen in the simulations that follow.\n\nWhile powerful in its simplicity, the differential equation SIR model pays for that simplicity by **assuming that there is homogenous mixing between populations**. Human agency and behaviour is abstracted away until people act like atoms bouncing into each other. This is where network SIR models have made their contribution. \n:::\n\n##\n\nWe'll define a function\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndef sir_model(network, beta, gamma, fraction_infected):\n  config = mc.Configuration()\n  config.add_model_parameter('beta', beta)\n  config.add_model_parameter('gamma', gamma)\n  config.add_model_parameter(\"fraction_infected\", fraction_infected)\n\n  model = ep.SIRModel(network)\n  model.set_initial_status(config)\n  return model\n```\n:::\n\n\n##\n\nAnd run our first SIR model!\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nsir_model_1 = sir_model(G, beta=0.05, gamma=0.01, fraction_infected=0.1)\nsir_1_iterations = sir_model_1.iteration_bunch(200, node_status=True)\nsir_1_trends, sir_1_deltas = sims.simulation_df(sir_1_iterations, G)\nsir_1_trends.head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Susceptible</th>\n      <th>Infected</th>\n      <th>Removed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.900000</td>\n      <td>0.100000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.890000</td>\n      <td>0.110000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.873333</td>\n      <td>0.126667</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.860000</td>\n      <td>0.140000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.843333</td>\n      <td>0.156667</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.796667</td>\n      <td>0.200000</td>\n      <td>0.003333</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0.773333</td>\n      <td>0.223333</td>\n      <td>0.003333</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.746667</td>\n      <td>0.250000</td>\n      <td>0.003333</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.720000</td>\n      <td>0.270000</td>\n      <td>0.010000</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0.703333</td>\n      <td>0.280000</td>\n      <td>0.016667</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n##\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\nsns.lineplot(data=sir_1_trends)\nax.set(xlabel='Iteration / step in time', ylabel='Proportion of nodes')\nsns.despine()\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](day-5_files/figure-revealjs/cell-6-output-1.svg){}\n:::\n:::\n\n\n##\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfig, (ax1, ax2, ax3) = plt.subplots(3,1, figsize=(8,8), sharex=True)\nsns.lineplot(ax = ax1, data=sir_1_deltas['Susceptible'], color='gray')\nsns.lineplot(ax = ax2, data=sir_1_deltas['Infected'], color='gray')\nsns.lineplot(ax = ax3, data=sir_1_deltas['Removed'], color='gray')\n## EMPHASIZE DEVIATIONS FROM 0\nax1.axhline(0, color='crimson')\nax2.axhline(0, color='crimson')\nax3.axhline(0, color='crimson')\nax3.set(xlabel='Iteration')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](day-5_files/figure-revealjs/cell-7-output-1.svg){}\n:::\n:::\n\n\n##\n\n![The same simulated small-world network as before, displayed 20 times –\nonce for each of the first 20 time steps in the simulation of epidemic spread through the network](media/small_world_epidemic.png){width=100% #fig-small_world_epidemic}\n\n## Let's do that 500 more times\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ntrends = multi_runs(\n  sir_model_1,\n  execution_number=500,\n  iteration_number=200,\n  infection_sets=None,\n  nprocesses=4\n)\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nsims.visualize_trends(trends, network=G, proportion=True, return_data=False)\n```\n\n::: {.cell-output .cell-output-display}\n![](day-5_files/figure-revealjs/cell-9-output-1.svg){}\n:::\n:::\n\n\n- caption: \"A plot featuring many simulated lines tracing the proportion of nodes susceptible, infected, and ‘removed’ as a function of time; the thicker, more pronounced lines represent the mean values across each iteration of the simulation. The infection spikes rapidly and then tapers off.\"\n\n## Let's add CNS\n\n- Enron later, maybe for threshold model\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nbluetooth_contact = icsspy.load_data('cns_bluetooth_filtered') \n\ng_bluetooth_contact = nx.from_pandas_edgelist(\n    bluetooth_contact, \n    'user_a', \n    'user_b', \n    create_using=nx.Graph()\n)\n```\n:::\n\n\n##\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ninfect_sets = [\n    sims.rand_infection_set(g_bluetooth_contact, 0.3)\n    for x in range(500)\n]\n\nsir_model_2 = sir_model(\n    g_bluetooth_contact, \n    beta=0.05, \n    gamma=0.01, \n    fraction_infected=0.1\n)\n\nsir_model_2_trends = multi_runs(\n    sir_model_2, \n    execution_number=500, \n    iteration_number=300, \n    infection_sets=infect_sets, \n    nprocesses=4\n)\n```\n:::\n\n\n##\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nsims.visualize_trends(\n    sir_model_2_trends,\n    network=g_bluetooth_contact,\n    proportion=True, \n    return_data=False\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](day-5_files/figure-revealjs/cell-12-output-1.svg){}\n:::\n:::\n\n\n##\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nsir_model_3 = sir_model(\n    g_bluetooth_contact,\n    beta=0.01,\n    gamma=0.01,\n    fraction_infected=0.1\n)\n\nsir_model_3_trends = multi_runs(\n    sir_model_3,\n    execution_number=500,\n    iteration_number=300,\n    infection_sets=infect_sets,\n    nprocesses=4\n)\n\nsims.visualize_trends(\n    sir_model_3_trends,\n    network=G,\n    proportion=True,\n    return_data=False\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](day-5_files/figure-revealjs/cell-13-output-1.svg){}\n:::\n:::\n\n\n# Complex Contagions and Threshold Models\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ninfect_sets = [\n    sims.rand_infection_set(g_bluetooth_contact, 0.1) \n    for x in range(500)\n]\n\ninfect_sets_2 = sims.add_to_infection_set(\n    infect_sets, 0.05, g_bluetooth_contact\n)\n```\n:::\n\n\n##\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nthresh_model = ep.ThresholdModel(g_bluetooth_contact)\nthresh_config = mc.Configuration()\n\nthreshold = 0.1\nfraction_infected = .1\nthresh_config.add_model_parameter(\"fraction_infected\", fraction_infected)\n\nfor n in g_bluetooth_contact.nodes():\n    thresh_config.add_node_configuration(\"threshold\", n, threshold)\n\nthresh_model.set_initial_status(thresh_config)\n```\n:::\n\n\n##\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nthreshold_trends = multi_runs(\n    thresh_model,\n    execution_number=500,\n    iteration_number=40,\n    infection_sets=infect_sets,\n    nprocesses=4\n)\n\nsims.visualize_trends(\n    threshold_trends,\n    network=g_bluetooth_contact,\n    states=[0, 1],\n    labels=['Not Activated', 'Activated'],\n    proportion=True,\n    return_data=False\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](day-5_files/figure-revealjs/cell-16-output-1.svg){}\n:::\n:::\n\n\n##\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nthresh_model_2 = ep.ThresholdModel(g_bluetooth_contact)\nthresh_config_2 = mc.Configuration()\nthreshold_2 = 0.35\nfraction_infected_2 = .1\n```\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nthresh_config_2.add_model_parameter(\n    \"fraction_infected\", fraction_infected_2\n)\n\nfor n in g_bluetooth_contact.nodes():\n    thresh_config_2.add_node_configuration(\"threshold\", n, threshold_2)\n\nthresh_model_2.set_initial_status(thresh_config_2)\n\nthreshold_trends_2 = multi_runs(\n    thresh_model_2,\n    execution_number=500,\n    iteration_number=40,\n    infection_sets=infect_sets,\n    nprocesses=4,\n)\n\nsims.visualize_trends(\n    threshold_trends_2,\n    network=g_bluetooth_contact,\n    states=[0, 1],\n    labels=['Not Activated', 'Activated'],\n    proportion=True,\n    return_data=False\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](day-5_files/figure-revealjs/cell-18-output-1.svg){}\n:::\n:::\n\n\n## \n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nthresh_model_3 = ep.ThresholdModel(g_bluetooth_contact)\nthresh_config_3 = mc.Configuration()\nthreshold_3 = 0.35\nfraction_infected_2 = .15\n\nthresh_config_3.add_model_parameter(\n    \"fraction_infected\", fraction_infected_2\n)\n\nfor n in g_bluetooth_contact.nodes():\n    thresh_config_3.add_node_configuration(\"threshold\", n, threshold_3)\n\nthresh_model_3.set_initial_status(thresh_config_3)\n```\n:::\n\n\n##\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nthreshold_trends_3 = multi_runs(\n    thresh_model_3,\n    execution_number=500,\n    iteration_number=40,\n    infection_sets=infect_sets_2,\n    nprocesses=4\n)\n\nsims.visualize_trends(\n    threshold_trends_3,\n    network=g_bluetooth_contact,\n    states=[0, 1],\n    labels=['Not Activated', 'Activated'],\n    proportion=True,\n    return_data=False\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](day-5_files/figure-revealjs/cell-20-output-1.svg){}\n:::\n:::\n\n\n##\n\n- redo this part maybe?\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nfrom scipy.stats import truncnorm\ndef get_truncated_normal(mean, sd, low, upp):\n    return truncnorm((low - mean) / sd, (upp - mean) / sd, loc=mean, scale=sd)\n\nmodel_cc_vt = ep.ThresholdModel(g_bluetooth_contact)\nconfig_cc_vt = mc.Configuration()\n\nfraction_infected = .1\nrandom_thresholds = []\nthreshold_dist = get_truncated_normal(mean=.35, sd=.001, low=0, upp=1)\n\n# Loop over all nodes to assign random thresholds\nfor n in g_bluetooth_contact.nodes():\n    threshold = threshold_dist.rvs()\n    config_cc_vt.add_node_configuration(\"threshold\", n, threshold)\n    random_thresholds.append(threshold)\n\n# Set the initial status with the configuration\nconfig_cc_vt.add_model_parameter(\"fraction_infected\", fraction_infected)\nmodel_cc_vt.set_initial_status(config_cc_vt)\n```\n:::\n\n\n- WITH THAT DONE, WE CAN ADD THE OTHER MODEL INFORMATION TO THE CONFIG.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nconfig_cc_vt.add_model_parameter(\"fraction_infected\", fraction_infected)\nmodel_cc_vt.set_initial_status(config_cc_vt)\n```\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nsns.ecdfplot(random_thresholds)\nsns.despine()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](day-5_files/figure-revealjs/cell-23-output-1.svg){}\n:::\n:::\n\n\n##\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nthreshold_trends_vt = multi_runs(\n    model_cc_vt,\n    execution_number=500,\n    iteration_number=40,\n    infection_sets=infect_sets,\n    nprocesses=4\n)\n```\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nsims.visualize_trends(\n    threshold_trends_vt,\n    network=g_bluetooth_contact,\n    states=[0, 1],\n    labels=['Not Activated', 'Activated'],\n    proportion=True,\n    return_data=False\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](day-5_files/figure-revealjs/cell-25-output-1.svg){}\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nmodel_cc_vt_2 = ep.ThresholdModel(g_bluetooth_contact)\nconfig_cc_vt_2 = mc.Configuration()\nfraction_infected = .1\nrandom_thresholds_2 = []\nthreshold_dist_2 = get_truncated_normal(mean=.35, sd=.1, low=0, upp=1)\n```\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nfor n in g_bluetooth_contact.nodes():\n    threshold_2 = threshold_dist_2.rvs()\n    config_cc_vt_2.add_node_configuration(\"threshold\", n, threshold_2)\n    random_thresholds_2.append(threshold_2)\n\nconfig_cc_vt_2.add_model_parameter(\"fraction_infected\", fraction_infected)\nmodel_cc_vt_2.set_initial_status(config_cc_vt_2)\n```\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nthreshold_trends_vt_2 = multi_runs(\n    model_cc_vt_2,\n    execution_number=500,\n    iteration_number=40,\n    infection_sets=infect_sets,\n    nprocesses=4\n)\n```\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nsims.visualize_trends(\n    threshold_trends_vt_2,\n    network=g_bluetooth_contact,\n    states=[0, 1],\n    labels=['Not Activated', 'Activated'],\n    proportion=True,\n    return_data=False\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](day-5_files/figure-revealjs/cell-29-output-1.svg){}\n:::\n:::\n\n\n# Mesa\n\n## Agent-based Modelling in Python\n\n`Mesa`\n\n\n\n# References\n\n##\n\n",
    "supporting": [
      "day-5_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}