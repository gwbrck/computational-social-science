{
  "hash": "0178721d44f49d2b317a4f3f32567bee",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Simulation &<br>Agent-based Models\"\nsubtitle: \"[DAY FIVE]{.kn-pink} [GESIS Fall Seminar in Computational Social Science]{.kn-blue}\"\nauthor:\n  - name: John McLevey\n    affiliations:\n      - name: University of Waterloo\n  - name: Johannes B. Gruber\n    affiliations:\n      - name: VU Amsterdam\noutput-dir: \"../docs/\"\nengine: jupyter\nformat:\n  revealjs:\n    theme: [default, custom.scss]\n    width: 1600\n    height: 900\n    embed-resources: true\n    execute:\n      enabled: true\n      echo: true\n      warning: false\n      freeze: true\n    slide-number: false\n    chalkboard: false\n    preview-links: auto\n    smaller: true\n    fig-align: left\n    fig-format: svg\n    lightbox: true\n    scrollable: true\n    code-overflow: scroll\n    code-fold: false\n    code-line-numbers: true\n    code-copy: hover\n    reference-location: document\n    tbl-cap-location: margin\n    logo: media/logo_gesis.png\n    footer: \"[CC BY-SA 4.0]{.nord-footer}\"\n    email-obfuscation: javascript\nhighlight-style: \"nord\"\nbibliography: references.bib\n---\n\n\n##\n\n:::: {.columns}\n::: {.column width=\"15%\"}\n### Today\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"75%\"}\n1. Why simulate?\n2. SIR models\n3. Agent-based modelling (ABM)\n4. Designing, developing, documenting, and analyzing models<br>[Simple and complex contagions (SIR, thresholds)]{.nord-footer}<br>[Opinion dynamics (bounded confidence)]{.nord-footer}<br>[Associative learning and diffusion]{.nord-footer}\n5. Empirically-calibrated ABMs<br>[Simulating networks]{.nord-footer}\n6. Developing models with Mesa\n:::\n::::\n\n\n# Why simulate?\n\n\n# SIR Models\n\n\n## Classic SIR\n\n:::: {.columns}\n::: {.column width=\"45%\"}\nHow do diseases spread through a population?\n\n- Divide the population into three \"compartments\"<br>**[S]{.kn-pink}usceptible**, **[I]{.kn-pink}nfected**, **[R]{.kn-pink}ecovered/Removed**\n- Model the movement of people in and out of the compartments over time\n- Traditionally done with differential equations\n\n<br>\n\n$$\n\\begin{align}\n\\frac{{dS}}{{dt}} &= - \\left( \\frac{{a}}{{N}}\\right)  I S \\\\\n\\frac{{dI}}{{dt}} &= \\left( \\frac{{a}}{{N}}\\right)  I S - b I \\\\\n\\frac{{dR}}{{dt}} &= bI\n\\end{align}\n$$\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\" .fragment}\n\nDon't worry if you're calculus is rusty! A **derivative** describes how one quantity changes in response to another quantity. \n\n$$\\frac{{d}}{{dt}}$$ \n\nis the derivative with respect to time, which represents the **rate of change** for a quantity given another quantity.\n\n<br>\n\n- $\\frac{{dS}}{{dt}}$ changes in the [s]{.kn-pink}**usceptible** compartment over time\n- $\\frac{{dI}}{{dt}}$ changes in the [i]{.kn-pink}**nfected** compartment over time\n- $\\frac{{dR}}{{dt}}$ changes in the [r]{.kn-pink}**ecovered** compartment over time\n:::\n::::\n\n\n## Classic SIR\n\n:::: {.columns}\n::: {.column width=\"45%\"}\nHow do diseases spread through a population?\n\n- Divide the population into three \"compartments\"<br>**[S]{.kn-pink}usceptible**, **[I]{.kn-pink}nfected**, **[R]{.kn-pink}ecovered/Removed**\n- Model the movement of people in and out of the compartments over time\n- Traditionally done with differential equations\n\n<br>\n\n$$\n\\begin{align}\n\\frac{{dS}}{{dt}} &= - \\left( \\frac{{a}}{{N}}\\right)  I S \\\\\n\\frac{{dI}}{{dt}} &= \\left( \\frac{{a}}{{N}}\\right)  I S - b I \\\\\n\\frac{{dR}}{{dt}} &= bI\n\\end{align}\n$$\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n\n#### The Susceptible Compartment\n\n$$\n\\frac{{dS}}{{dt}} = - \\left( \\frac{{a}}{{N}}\\right)  I S \n$$\n\n- $I S$ means that the more infected people ($I$) and susceptible people ($S$) there are, the more likely it is that susceptible people will become infected.\n- $\\frac{{a}}{{N}}$ represents the rate at which the disease spreads in the population, where $a$ is a constant that reflects how easily the disease spreads, and $N$ is the size of the population.\n- The minus sign indicates that the number of people in this compartment will decrease as they become infected or are removed.\n:::\n::::\n\n\n\n\n## Classic SIR\n\n:::: {.columns}\n::: {.column width=\"45%\"}\nHow do diseases spread through a population?\n\n- Divide the population into three \"compartments\"<br>**[S]{.kn-pink}usceptible**, **[I]{.kn-pink}nfected**, **[R]{.kn-pink}ecovered/Removed**\n- Model the movement of people in and out of the compartments over time\n- Traditionally done with differential equations\n\n<br>\n\n$$\n\\begin{align}\n\\frac{{dS}}{{dt}} &= - \\left( \\frac{{a}}{{N}}\\right)  I S \\\\\n\\frac{{dI}}{{dt}} &= \\left( \\frac{{a}}{{N}}\\right)  I S - b I \\\\\n\\frac{{dR}}{{dt}} &= bI\n\\end{align}\n$$\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n\n#### The Infected Compartment\n\n$$\n\\frac{{dI}}{{dt}} = \\left( \\frac{{a}}{{N}}\\right)  I S - b I\n$$\n\n- $\\left( \\frac{{a}}{{N}}\\right) I S$ represents the number of people getting infected (i.e., moving from $S$ to $I$).\n- $b$ is a constant that reflects how quickly people recover.^[If $R$ is \"removed\" instead of \"recovered\" ... there is no recovery.]\n- $- b I$ represents the number of people recovering (moving from $I$ to $R$). \n:::\n::::\n\n\n## Classic SIR\n\n:::: {.columns}\n::: {.column width=\"45%\"}\nHow do diseases spread through a population?\n\n- Divide the population into three \"compartments\"<br>**[S]{.kn-pink}usceptible**, **[I]{.kn-pink}nfected**, **[R]{.kn-pink}ecovered/Removed**\n- Model the movement of people in and out of the compartments over time\n- Traditionally done with differential equations\n\n<br>\n\n$$\n\\begin{align}\n\\frac{{dS}}{{dt}} &= - \\left( \\frac{{a}}{{N}}\\right)  I S \\\\\n\\frac{{dI}}{{dt}} &= \\left( \\frac{{a}}{{N}}\\right)  I S - b I \\\\\n\\frac{{dR}}{{dt}} &= bI\n\\end{align}\n$$\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n\n#### The Recovered Compartment\n\n$$\n\\frac{{dR}}{{dt}} = bI\n$$\n\n- $bI$ shows that the number of recovered people increases as infected people recover.\n:::\n::::\n\n## Classic SIR\n\n<br>\n\n:::: {.columns}\n::: {.column width=\"45%\"}\n$$\n\\begin{align}\n\\frac{{dS}}{{dt}} &= - \\left( \\frac{{a}}{{N}}\\right)  I S \\\\\n\\frac{{dI}}{{dt}} &= \\left( \\frac{{a}}{{N}}\\right)  I S - b I \\\\\n\\frac{{dR}}{{dt}} &= bI\n\\end{align}\n$$\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\nWe're just tracking the number of people in each compartment over time.\n\n- $S$ decreases as people get infected.\n- $I$ increases as more people get infected but decreases as they recover.\n- $R$ increases as people recover from the infection.\n:::\n::::\n\n## SIR in Discrete Time\n\n:::: {.columns}\n::: {.column width=\"45%\"}\nWe can represent the same basic model of changes in the number of people in each compartment *in discrete time intervals*. \n\n$$\n\\begin{align}\nS(t + 1) &= S(t) - \\beta S(t)I(t) \\\\\nI(t + 1) &= I(t) + \\beta S(t)I(t) - \\gamma I(t) \\\\\nR(t + 1) &= R(t) + \\gamma I(t)\n\\end{align}\n$$\n\n<br><br>\n\n**Some Model Assumptions** $\\longrightarrow$\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n> These equations define how the relative numbers of susceptible, infected, and recovered individuals change over time, and represent two propositions about disease contagion. [First]{.kn-pink}, that susceptible individuals become infected via contact with infected individuals, at a rate that is proportional to the expected number of interactions between susceptible and infected individuals, tempered by the transmissibility of the infection, $β$. [Second]{.kn-pink}, that infected individuals recover at a constant rate, $γ$. \n>\n> <br>\n>\nAn [implicit assumption]{.kn-pink} is that the rate of interactions between individuals in different states is exactly proportional to the frequencies of those states in the population—that is, that the population is [well-mixed]{.kn-pink}.\n>\n> <br>\n>\n> @smaldino2023modeling, page 18\n:::\n::::\n\n## Mixing and Flattening the Curve\n\n<br>\n\n:::: {.columns}\n::: {.column width=\"55%\"}\nReducing physical contact reduces the **effective transmission rate** of a disease, which has a big impact on the number of sick people in a population.\n\n![Proportion of infected people in a population over time from two SIR simulations with different transmissability rates. [We'll develop the model this figure comes from later in the lecture.]{.nord-light}](media/sir_compare){width=75% #fig-sir_compare}\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"40%\"}\n\n<br><br><br>\n\n#### ~{{< var ontario_population >}}M people in Ontario, Canada [(as of 2024)]{.nord-light}\n\n\n\n- A peak at 0.55 in the high-transmissability model  $\\approx$ 7.92M infected people\n- A peak at 0.22 in the low-transmissability model  $\\approx$ 3.17M infected people\n\nA 33.0% difference translates to $\\approx$ 5M infected people **at that particular moment in time**.\n:::\n::::\n\n## Mixing and Flattening the Curve\n\n<br>\n\n:::: {.columns}\n::: {.column width=\"55%\"}\n![A comparison of three SIR models with identical parameters other than how much distance an agent can move around in our simulated world. More movement = more mixing = more exposures = more infections. But there are some qualifications that will come up a bit later in the lecture.](media/sir_compare_models_3-6.png){width=100% #fig-sir_compare_models_3-6}\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"40%\"}\nPeak infections are slower and lower when agents move less. But we all know this from experience now...\n\n<br>\n\n#### Shared Parameters\n\n- `N` {{< var model_4.N >}} \n- `grid_height` {{< var model_4.grid_height >}} \n- `grid_width` {{< var model_4.grid_width >}} \n- `infection_rate` {{< var model_4.infection_rate >}} \n- `n_initial_infections` {{< var model_4.n_initial_infections >}} \n- `n_iterations` {{< var model_4.n_iterations >}} \n- `recovery_time_range` (7, 14) <!-- Quarto doesn't support tuples or lists; change this later if time -->\n:::\n::::\n\n\n\n\n\n\n\n\n## SIR, Classic vs. Agent-based\n\n- How does it compare?\n- Pros and cons?\n\n\n## Agent-based SIR\n\n:::: {.columns}\n::: {.column width=\"40%\"}\n![Don't forget about your conda environment!](media/chatgpt_dependency_hell.png)\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"55%\"}\n#### Your Conda Virtual Environment\n\nFrom the command line:\n\n```zsh\nconda activate gt\n```\n\n<br>\n\n#### Package Imports\n\nIn your script/notebooks:\n\n::: {#c13d7593 .cell execution_count=2}\n``` {.python .cell-code}\nimport networkx as nx\nimport pandas as pd\n\nimport icsspy\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nicsspy.set_style()\n```\n:::\n\n\n:::\n::::\n\n\n## Agent-based SIR\n\n#### Simulating a Population\n\n:::: {.columns}\n::: {.column width=\"55%\"}\n- Generate a small-world network with 300 nodes\n- Each node connected to 4 neighbors with 15% chance of rewiring\n\n```python\npopulation_size = 300\nG = nx.watts_strogatz_graph(population_size, 4, 0.15)\nG.name = \"A Simulated Small World\"\n\nlayout = nx.nx_pydot.graphviz_layout(G)\n\nfig, ax = plt.subplots(figsize=(12, 12))\nnx.draw(G, \n    pos=layout, \n    node_color='gray', \n    edge_color='gray', \n    node_size=100, \n    width=.5)\nplt.savefig(\"media/simulation-0.png\", dpi=300)\n```\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"40%\"}\n![A simulated \"small world\" network. **We'll critique and improve this model later in the lecture.**](media/simulation-0.png){width=100% #fig-simulation-0}\n:::\n::::\n\n\n# Agent-based Modelling (ABM)\n\n\n# Designing, Developing, Documenting, and Analyzing Models\n\n\n# Designing, Developing, Documenting, and Analyzing Models\n\n[Simple Contagions, SIR]{.kn-pink}\n\n\n\n# Designing, Developing, Documenting, and Analyzing Models\n\n[Complex Contagions, Thresholds]{.kn-pink}\n\n\n# Designing, Developing, Documenting, and Analyzing Models\n\n[Opinion Dynamics]{.kn-pink}\n\n\n# Designing, Developing, Documenting, and Analyzing Models\n\n[Associative Diffusion and Learning]{.kn-pink}\n\n\n# Empirically-calibrated ABMs\n\n\n# Developing Models with Mesa\n\n## SIR Model\n\n::: {#498cca6d .cell execution_count=3}\n``` {.python .cell-code}\nfrom mesa import Agent, Model\nfrom mesa.time import RandomActivation\nfrom mesa.space import MultiGrid\nfrom mesa.datacollection import DataCollector\nimport matplotlib.pyplot as plt\nfrom pprint import pprint\nimport numpy as np\nimport random\nimport yaml\n\nimport icsspy\nicsspy.set_style()\n\nrandom.seed(36)\n```\n:::\n\n\n## Define the agent class\n\n::: {#22c3cf74 .cell execution_count=4}\n``` {.python .cell-code}\nclass SIRAgent(Agent):\n    def __init__(self, unique_id, model, recovery_time_range=(8, 12), max_agent_step_size=1):\n        super().__init__(unique_id, model)\n        self.state = \"S\"  # All agents start as susceptible\n        self.infected_time = 0  # Counter for how long the agent has been infected\n        self.recovery_time_range = recovery_time_range  # Tuple for min and max recovery times\n        self.max_agent_step_size = max_agent_step_size  # Step size for movement\n\n    def step(self):\n        if self.state == \"I\":\n            self.infected_time += 1  # Increment the time the agent has been infected\n\n            # Check if agent is within the recovery window\n            if self.infected_time >= self.recovery_time_range[0]:\n                if self.random.random() < 0.5 or self.infected_time >= self.recovery_time_range[1]:\n                    self.state = \"R\"  # Recover if within the window or if max time reached\n\n            if self.state == \"I\":  # Only try to infect others if still infected\n                # Try to infect neighbors\n                neighbors = self.model.grid.get_neighbors(self.pos, moore=True, include_center=False)\n                for neighbor in neighbors:\n                    if neighbor.state == \"S\" and self.random.random() < self.model.infection_rate:\n                        neighbor.state = \"I\"\n\n        # Move to a random neighboring cell with the given step size\n        possible_moves = self.model.grid.get_neighborhood(self.pos, moore=True, include_center=False, radius=self.max_agent_step_size)\n        new_position = self.random.choice(possible_moves)\n        self.model.grid.move_agent(self, new_position)\n```\n:::\n\n\n## Define the model class\n\n::: {#19542f91 .cell execution_count=5}\n``` {.python .cell-code}\nclass SIRModel(Model):\n    def __init__(self, grid_width, grid_height, N, infection_rate, recovery_time_range, max_agent_step_size=1, n_initial_infections=1):\n        self.num_agents = N\n        self.grid = MultiGrid(grid_width, grid_height, True)\n        self.schedule = RandomActivation(self)\n        self.infection_rate = infection_rate\n        self.recovery_time_range = recovery_time_range\n        self.max_agent_step_size = max_agent_step_size\n\n        # Create agents\n        for i in range(self.num_agents):\n            a = SIRAgent(i, self)\n            self.grid.place_agent(a, (self.random.randrange(self.grid.width),\n                                      self.random.randrange(self.grid.height)))\n            self.schedule.add(a)\n\n        # Infect a specified number of random agents\n        initial_infected_agents = self.random.sample(self.schedule.agents, n_initial_infections)\n        for agent in initial_infected_agents:\n            agent.state = \"I\"\n            agent.infection_duration = 0  # Initialize infection duration\n\n        self.datacollector = DataCollector(\n            model_reporters={\"Infected\": self.compute_infected},\n            agent_reporters={\"State\": \"state\"}\n        )\n\n    def step(self):\n        self.datacollector.collect(self)\n        self.schedule.step()\n\n    def compute_infected(self):\n        infected = sum([1 for a in self.schedule.agents if a.state == \"I\"])\n        return infected / self.num_agents\n```\n:::\n\n\n## Run the model\n\nLoad the model parameters\n\n::: {#58569d68 .cell execution_count=6}\n``` {.python .cell-code}\nwith open('_variables.yml', 'r') as file:\n    params = yaml.safe_load(file)\n\nmodel_1_params = params.get('model_1')\npprint(model_1_params)\n\nmodel_2_params = params.get('model_2')\npprint(model_2_params)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'N': 100,\n 'grid_height': 20,\n 'grid_width': 20,\n 'infection_rate': 0.3,\n 'max_agent_step_size': 1,\n 'n_initial_infections': 2,\n 'n_iterations': 150,\n 'recovery_time_range': [14, 24]}\n{'N': 100,\n 'grid_height': 20,\n 'grid_width': 20,\n 'infection_rate': 0.15,\n 'max_agent_step_size': 1,\n 'n_initial_infections': 2,\n 'n_iterations': 150,\n 'recovery_time_range': [14, 24]}\n```\n:::\n:::\n\n\nand run!\n\n::: {#328e1cae .cell execution_count=7}\n``` {.python .cell-code}\nmodel_1 = SIRModel(\n    n_initial_infections = model_1_params['n_initial_infections'],\n    grid_width = model_1_params['grid_width'],\n    grid_height = model_1_params['grid_height'],\n    N = model_1_params['N'],\n    infection_rate = model_1_params['infection_rate'],\n    recovery_time_range = model_1_params['recovery_time_range'],\n    max_agent_step_size = model_1_params['max_agent_step_size'],\n)\n\nfor i in range(model_1_params['n_iterations']):\n    model_1.step()\n\nm1res = model_1.datacollector.get_model_vars_dataframe()\n```\n:::\n\n\n::: {#2d573650 .cell execution_count=8}\n``` {.python .cell-code}\nmodel_2 = SIRModel(\n    n_initial_infections = model_2_params['n_initial_infections'],\n    grid_width = model_2_params['grid_width'],\n    grid_height = model_2_params['grid_height'],\n    N = model_2_params['N'],\n    infection_rate = model_2_params['infection_rate'],\n    recovery_time_range = model_2_params['recovery_time_range'],\n    max_agent_step_size = model_2_params['max_agent_step_size'],\n)\n\nfor i in range(model_2_params['n_iterations']):\n    model_2.step()\n\nm2res = model_2.datacollector.get_model_vars_dataframe()\n```\n:::\n\n\n## \n\nPlot the results\n\n::: {#b08957c1 .cell execution_count=9}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\nax.plot(m1res['Infected'], label=r'High transmissability, $\\beta$=0.3')\nax.plot(m2res['Infected'], label=r'Low transmissability $\\beta$=0.15')\nplt.xlabel(\"\\nDiscrete Steps in Time\")\nplt.ylabel(\"Proportion Infected\\n\")\nplt.legend(loc='upper right', fontsize=10)\nplt.savefig('media/sir_compare_models_1-2.png')\n```\n\n::: {.cell-output .cell-output-display}\n![](day-5_files/figure-revealjs/cell-10-output-1.svg){}\n:::\n:::\n\n\n![This is @fig-sir_compare from earlier in the lecture. Proportion of infected people in a population over time from two SIR simulations with different transmissability rates.](media/sir_compare){width=100%}\n\n\n## Model 3\n\n::: {#e0a020f7 .cell execution_count=10}\n``` {.python .cell-code}\nmodel_3_params = params.get('model_3')\npprint(model_3_params['max_agent_step_size'])\n\nmodel_4_params = params.get('model_4')\npprint(model_4_params['max_agent_step_size'])\n\nmodel_5_params = params.get('model_5')\npprint(model_5_params['max_agent_step_size'])\n\nmodel_6_params = params.get('model_6')\npprint(model_6_params['max_agent_step_size'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n4\n6\n8\n```\n:::\n:::\n\n\n::: {#bf28a0c1 .cell execution_count=11}\n``` {.python .cell-code}\nmodel_3 = SIRModel(\n    n_initial_infections = model_3_params['n_initial_infections'],\n    grid_width = model_3_params['grid_width'],\n    grid_height = model_3_params['grid_height'],\n    N = model_3_params['N'],\n    infection_rate = model_3_params['infection_rate'],\n    recovery_time_range = model_3_params['recovery_time_range'],\n    max_agent_step_size = model_3_params['max_agent_step_size'],\n)\n\nfor i in range(model_3_params['n_iterations']):\n    model_3.step()\n\nm3res = model_3.datacollector.get_model_vars_dataframe()\n```\n:::\n\n\n## \n\n::: {#c2752f61 .cell execution_count=12}\n``` {.python .cell-code}\nmodel_4 = SIRModel(\n    n_initial_infections = model_4_params['n_initial_infections'],\n    grid_width = model_4_params['grid_width'],\n    grid_height = model_4_params['grid_height'],\n    N = model_4_params['N'],\n    infection_rate = model_4_params['infection_rate'],\n    recovery_time_range = model_4_params['recovery_time_range'],\n    max_agent_step_size = model_4_params['max_agent_step_size'],\n)\n\nfor i in range(model_4_params['n_iterations']):\n    model_4.step()\n\nm4res = model_4.datacollector.get_model_vars_dataframe()\n```\n:::\n\n\n##\n\n::: {#c7a89574 .cell execution_count=13}\n``` {.python .cell-code}\nmodel_5 = SIRModel(\n    n_initial_infections = model_5_params['n_initial_infections'],\n    grid_width = model_5_params['grid_width'],\n    grid_height = model_5_params['grid_height'],\n    N = model_5_params['N'],\n    infection_rate = model_5_params['infection_rate'],\n    recovery_time_range = model_5_params['recovery_time_range'],\n    max_agent_step_size = model_5_params['max_agent_step_size'],\n)\n\nfor i in range(model_5_params['n_iterations']):\n    model_5.step()\n\nm5res = model_5.datacollector.get_model_vars_dataframe()\n```\n:::\n\n\n##\n\n::: {#ef85a7cd .cell execution_count=14}\n``` {.python .cell-code}\nmodel_6 = SIRModel(\n    n_initial_infections = model_6_params['n_initial_infections'],\n    grid_width = model_6_params['grid_width'],\n    grid_height = model_6_params['grid_height'],\n    N = model_6_params['N'],\n    infection_rate = model_6_params['infection_rate'],\n    recovery_time_range = model_6_params['recovery_time_range'],\n    max_agent_step_size = model_6_params['max_agent_step_size'],\n)\n\nfor i in range(model_6_params['n_iterations']):\n    model_6.step()\n\nm6res = model_6.datacollector.get_model_vars_dataframe()\n```\n:::\n\n\n##\n\nPlot the results\n\n::: {#f7d4a32a .cell execution_count=15}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\nax.plot(m3res['Infected'], label=f'Max Agent Steps: {model_3_params['max_agent_step_size']}')\nax.plot(m4res['Infected'], label=f'Max Agent Steps: {model_4_params['max_agent_step_size']}')\nax.plot(m5res['Infected'], label=f'Max Agent Steps: {model_5_params['max_agent_step_size']}')\nax.plot(m6res['Infected'], label=f'Max Agent Steps: {model_6_params['max_agent_step_size']}')\nplt.title(r'$\\beta$=' + f'{model_3_params['infection_rate']} for all models\\n', loc='left')\nplt.xlabel(\"\\nDiscrete Steps in Time\")\nplt.ylabel(\"Proportion Infected\\n\")\nplt.legend(loc='upper right', fontsize=10)\nplt.savefig('media/sir_compare_models_3-6.png')\n```\n\n::: {.cell-output .cell-output-display}\n![](day-5_files/figure-revealjs/cell-16-output-1.svg){}\n:::\n:::\n\n\n<!-- UPDATE _VARIABLES -->\n\n\n\n# References\n\n##\n\n",
    "supporting": [
      "day-5_files"
    ],
    "filters": [],
    "includes": {}
  }
}